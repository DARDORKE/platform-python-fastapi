#!/usr/bin/env python3
"""
Script d'initialisation compl√®te du projet.
G√©n√®re la structure de la base de donn√©es et d√©ploie les fixtures.
"""
import os
import sys
import time
import subprocess
from sqlalchemy import create_engine, text
from sqlalchemy.orm import sessionmaker
from sqlalchemy.exc import OperationalError
from datetime import datetime, timedelta

# Add the backend directory to the path
sys.path.insert(0, '/app')
sys.path.insert(0, '/app/app')

from app.models.user import User, UserRole
from app.models.project import Project, ProjectStatus, ProjectPriority
from app.models.task import Task, TaskStatus, TaskPriority
from app.core.security import get_password_hash
from app.models.base import Base

def print_banner():
    """Print initialization banner."""
    print("=" * 80)
    print("üöÄ INITIALISATION DU PROJET PORTFOLIO PLATFORM")
    print("=" * 80)
    print(f"üìÖ Date/Heure : {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"üêç Version Python : {sys.version.split()[0]}")
    print("=" * 80)

def get_database_url():
    """Get database URL from environment or use default."""
    # Use synchronous driver for initialization
    database_url = os.getenv(
        "DATABASE_URL",
        "postgresql://platform_user:platform_password@database:5432/platform"
    )
    # Convert asyncpg URL to psycopg2 URL for synchronous operation
    if "postgresql+asyncpg://" in database_url:
        database_url = database_url.replace("postgresql+asyncpg://", "postgresql://")
    return database_url

def wait_for_database(engine, max_retries=30):
    """Wait for database to be ready."""
    print("‚è≥ Attente de la connexion √† la base de donn√©es...")
    
    for attempt in range(max_retries):
        try:
            with engine.connect() as conn:
                conn.execute(text("SELECT 1"))
            print("‚úÖ Connexion √† la base de donn√©es √©tablie")
            return True
        except OperationalError as e:
            if attempt < max_retries - 1:
                print(f"‚ùå Base de donn√©es non pr√™te (tentative {attempt + 1}/{max_retries})")
                time.sleep(2)
            else:
                print(f"‚ùå √âchec de connexion apr√®s {max_retries} tentatives")
                return False
    return False

def run_migrations(engine):
    """Run database migrations using Alembic."""
    print("üîÑ Ex√©cution des migrations Alembic...")
    
    try:
        # Check if alembic is available
        result = subprocess.run(['alembic', '--version'], 
                              capture_output=True, text=True, cwd='/app')
        if result.returncode != 0:
            print("‚ö†Ô∏è  Alembic non trouv√©, cr√©ation directe des tables...")
            create_tables_directly(engine)
            return True
            
        # Run migrations
        print("üìã Mise √† jour vers la derni√®re version...")
        result = subprocess.run(['alembic', 'upgrade', 'head'], 
                              capture_output=True, text=True, cwd='/app')
        
        if result.returncode == 0:
            print("‚úÖ Migrations Alembic ex√©cut√©es avec succ√®s")
            return True
        else:
            print(f"‚ö†Ô∏è  Erreur Alembic : {result.stderr}")
            print("üîÑ Tentative de cr√©ation directe des tables...")
            create_tables_directly(engine)
            return True
            
    except Exception as e:
        print(f"‚ö†Ô∏è  Erreur lors des migrations : {e}")
        print("üîÑ Tentative de cr√©ation directe des tables...")
        create_tables_directly(engine)
        return True

def create_tables_directly(engine):
    """Create tables directly using SQLAlchemy."""
    print("üîß Cr√©ation directe des tables...")
    try:
        Base.metadata.create_all(bind=engine)
        print("‚úÖ Tables cr√©√©es avec succ√®s")
    except Exception as e:
        print(f"‚ùå Erreur lors de la cr√©ation des tables : {e}")
        raise

def check_database_schema(session):
    """Check if database schema is properly initialized."""
    print("üîç V√©rification du sch√©ma de la base de donn√©es...")
    
    try:
        # Try to query each table
        session.query(User).first()
        session.query(Project).first()
        session.query(Task).first()
        print("‚úÖ Sch√©ma de la base de donn√©es valid√©")
        return True
    except Exception as e:
        print(f"‚ùå Probl√®me avec le sch√©ma : {e}")
        return False

def clear_existing_data(session):
    """Clear existing data from tables."""
    print("üóëÔ∏è  Nettoyage des donn√©es existantes...")
    
    try:
        # Delete in reverse order of dependencies
        deleted_tasks = session.query(Task).count()
        deleted_projects = session.query(Project).count()
        deleted_users = session.query(User).count()
        
        session.query(Task).delete()
        session.query(Project).delete()
        session.query(User).delete()
        session.commit()
        
        print(f"‚úÖ Donn√©es supprim√©es : {deleted_users} utilisateurs, {deleted_projects} projets, {deleted_tasks} t√¢ches")
        
    except Exception as e:
        print(f"‚ùå Erreur lors du nettoyage : {e}")
        session.rollback()
        raise

def create_demo_users(session):
    """Create demo users with comprehensive data."""
    print("üë• Cr√©ation des utilisateurs de d√©monstration...")
    
    users_data = [
        {
            "email": "admin@example.com",
            "username": "admin",
            "full_name": "Administrateur Syst√®me",
            "hashed_password": get_password_hash("admin123"),
            "is_active": True,
            "is_superuser": True,
            "role": UserRole.ADMIN,
        },
        {
            "email": "manager@example.com",
            "username": "manager",
            "full_name": "Chef de Projet",
            "hashed_password": get_password_hash("manager123"),
            "is_active": True,
            "role": UserRole.MANAGER,
        },
        {
            "email": "john.doe@example.com",
            "username": "johndoe",
            "full_name": "John Doe",
            "hashed_password": get_password_hash("user123"),
            "is_active": True,
            "role": UserRole.USER,
        },
        {
            "email": "jane.smith@example.com",
            "username": "janesmith",
            "full_name": "Jane Smith",
            "hashed_password": get_password_hash("user123"),
            "is_active": True,
            "role": UserRole.USER,
        },
        {
            "email": "developer@example.com",
            "username": "developer",
            "full_name": "D√©veloppeur Senior",
            "hashed_password": get_password_hash("dev123"),
            "is_active": True,
            "role": UserRole.USER,
        },
        {
            "email": "tester@example.com",
            "username": "tester",
            "full_name": "Testeur QA",
            "hashed_password": get_password_hash("test123"),
            "is_active": True,
            "role": UserRole.USER,
        },
    ]
    
    users = []
    for user_data in users_data:
        user = User(**user_data)
        session.add(user)
        users.append(user)
    
    session.commit()
    print(f"‚úÖ {len(users)} utilisateurs cr√©√©s")
    return users

def create_demo_projects(session, users):
    """Create demo projects with realistic data."""
    print("üìÅ Cr√©ation des projets de d√©monstration...")
    
    projects_data = [
        {
            "name": "E-commerce Platform",
            "description": "D√©veloppement d'une plateforme e-commerce moderne avec React, FastAPI et PostgreSQL. Syst√®me complet avec gestion des produits, commandes, paiements et analytics.",
            "status": ProjectStatus.ACTIVE,
            "priority": ProjectPriority.HIGH,
            "start_date": datetime.now() - timedelta(days=45),
            "end_date": datetime.now() + timedelta(days=75),
            "budget": 85000,
            "owner_id": users[1].id,  # Manager
        },
        {
            "name": "Mobile App Development",
            "description": "Application mobile React Native pour iOS et Android. Interface utilisateur moderne avec fonctionnalit√©s offline, notifications push et synchronisation cloud.",
            "status": ProjectStatus.PLANNING,
            "priority": ProjectPriority.MEDIUM,
            "start_date": datetime.now() + timedelta(days=10),
            "end_date": datetime.now() + timedelta(days=150),
            "budget": 65000,
            "owner_id": users[1].id,  # Manager
        },
        {
            "name": "API Documentation Portal",
            "description": "Portail de documentation API complet avec guides d√©veloppeur, exemples interactifs et outils de test. Bas√© sur OpenAPI/Swagger avec personnalisation avanc√©e.",
            "status": ProjectStatus.ACTIVE,
            "priority": ProjectPriority.LOW,
            "start_date": datetime.now() - timedelta(days=20),
            "end_date": datetime.now() + timedelta(days=40),
            "budget": 25000,
            "owner_id": users[2].id,  # John Doe
        },
        {
            "name": "DevOps Pipeline",
            "description": "Pipeline CI/CD complet avec Docker, Kubernetes, monitoring et d√©ploiement automatis√©. Incluant tests automatis√©s, s√©curit√© et observabilit√©.",
            "status": ProjectStatus.COMPLETED,
            "priority": ProjectPriority.HIGH,
            "start_date": datetime.now() - timedelta(days=90),
            "end_date": datetime.now() - timedelta(days=10),
            "budget": 45000,
            "owner_id": users[4].id,  # Developer
        },
        {
            "name": "Analytics Dashboard",
            "description": "Tableau de bord analytics en temps r√©el avec visualisations interactives, rapports personnalis√©s et alertes automatiques. Int√©gration avec diverses sources de donn√©es.",
            "status": ProjectStatus.ACTIVE,
            "priority": ProjectPriority.MEDIUM,
            "start_date": datetime.now() - timedelta(days=30),
            "end_date": datetime.now() + timedelta(days=60),
            "budget": 40000,
            "owner_id": users[3].id,  # Jane Smith
        },
        {
            "name": "Security Audit",
            "description": "Audit de s√©curit√© complet de l'infrastructure et des applications. Tests de p√©n√©tration, analyse des vuln√©rabilit√©s et recommandations de s√©curit√©.",
            "status": ProjectStatus.PLANNING,
            "priority": ProjectPriority.HIGH,
            "start_date": datetime.now() + timedelta(days=5),
            "end_date": datetime.now() + timedelta(days=35),
            "budget": 30000,
            "owner_id": users[5].id,  # Tester
        },
    ]
    
    projects = []
    for project_data in projects_data:
        project = Project(**project_data)
        session.add(project)
        projects.append(project)
    
    session.commit()
    print(f"‚úÖ {len(projects)} projets cr√©√©s")
    return projects

def create_demo_tasks(session, users, projects):
    """Create demo tasks with realistic workflow."""
    print("üìù Cr√©ation des t√¢ches de d√©monstration...")
    
    tasks_data = [
        # E-commerce Platform tasks
        {
            "title": "Setup infrastructure",
            "description": "Configuration de l'infrastructure AWS avec Terraform, mise en place des environnements de dev/staging/prod",
            "status": TaskStatus.DONE,
            "priority": TaskPriority.HIGH,
            "due_date": datetime.now() - timedelta(days=40),
            "estimated_hours": 16,
            "actual_hours": 18,
            "is_completed": True,
            "completion_date": datetime.now() - timedelta(days=40),
            "owner_id": users[4].id,  # Developer
            "project_id": projects[0].id,
        },
        {
            "title": "User authentication system",
            "description": "Impl√©mentation du syst√®me d'authentification JWT avec refresh tokens, 2FA et gestion des sessions",
            "status": TaskStatus.IN_PROGRESS,
            "priority": TaskPriority.HIGH,
            "due_date": datetime.now() + timedelta(days=7),
            "estimated_hours": 32,
            "actual_hours": 24,
            "owner_id": users[2].id,  # John Doe
            "project_id": projects[0].id,
        },
        {
            "title": "Product catalog API",
            "description": "D√©veloppement des endpoints REST pour la gestion des produits avec recherche, filtrage et pagination",
            "status": TaskStatus.TODO,
            "priority": TaskPriority.MEDIUM,
            "due_date": datetime.now() + timedelta(days=20),
            "estimated_hours": 40,
            "owner_id": users[2].id,  # John Doe
            "project_id": projects[0].id,
        },
        {
            "title": "Shopping cart & checkout",
            "description": "Fonctionnalit√© de panier d'achat avec gestion des sessions Redis et processus de commande complet",
            "status": TaskStatus.TODO,
            "priority": TaskPriority.HIGH,
            "due_date": datetime.now() + timedelta(days=35),
            "estimated_hours": 28,
            "owner_id": users[3].id,  # Jane Smith
            "project_id": projects[0].id,
        },
        {
            "title": "Payment integration",
            "description": "Int√©gration avec Stripe pour les paiements en ligne, gestion des webhooks et r√©conciliation",
            "status": TaskStatus.TODO,
            "priority": TaskPriority.HIGH,
            "due_date": datetime.now() + timedelta(days=50),
            "estimated_hours": 24,
            "owner_id": users[4].id,  # Developer
            "project_id": projects[0].id,
        },
        
        # Mobile App tasks
        {
            "title": "App architecture design",
            "description": "Conception de l'architecture React Native avec Redux, navigation et gestion d'√©tat",
            "status": TaskStatus.IN_PROGRESS,
            "priority": TaskPriority.HIGH,
            "due_date": datetime.now() + timedelta(days=15),
            "estimated_hours": 20,
            "actual_hours": 12,
            "owner_id": users[4].id,  # Developer
            "project_id": projects[1].id,
        },
        {
            "title": "UI/UX Design System",
            "description": "Cr√©ation du syst√®me de design avec composants r√©utilisables, th√®mes et guidelines",
            "status": TaskStatus.TODO,
            "priority": TaskPriority.MEDIUM,
            "due_date": datetime.now() + timedelta(days=30),
            "estimated_hours": 36,
            "owner_id": users[3].id,  # Jane Smith
            "project_id": projects[1].id,
        },
        {
            "title": "Push notifications",
            "description": "Impl√©mentation des notifications push avec Firebase/FCM et gestion des permissions",
            "status": TaskStatus.TODO,
            "priority": TaskPriority.MEDIUM,
            "due_date": datetime.now() + timedelta(days=45),
            "estimated_hours": 16,
            "owner_id": users[4].id,  # Developer
            "project_id": projects[1].id,
        },
        
        # API Documentation tasks
        {
            "title": "OpenAPI specification",
            "description": "Documentation compl√®te des endpoints API avec OpenAPI 3.0, exemples et sch√©mas",
            "status": TaskStatus.DONE,
            "priority": TaskPriority.MEDIUM,
            "due_date": datetime.now() - timedelta(days=15),
            "estimated_hours": 20,
            "actual_hours": 22,
            "is_completed": True,
            "completion_date": datetime.now() - timedelta(days=15),
            "owner_id": users[2].id,  # John Doe
            "project_id": projects[2].id,
        },
        {
            "title": "Interactive API explorer",
            "description": "Portail d√©veloppeur interactif avec tests d'API en temps r√©el et g√©n√©ration de code",
            "status": TaskStatus.IN_PROGRESS,
            "priority": TaskPriority.LOW,
            "due_date": datetime.now() + timedelta(days=20),
            "estimated_hours": 24,
            "actual_hours": 8,
            "owner_id": users[2].id,  # John Doe
            "project_id": projects[2].id,
        },
        {
            "title": "Developer guides",
            "description": "Guides complets pour d√©veloppeurs avec tutoriels, exemples pratiques et meilleures pratiques",
            "status": TaskStatus.TODO,
            "priority": TaskPriority.LOW,
            "due_date": datetime.now() + timedelta(days=35),
            "estimated_hours": 18,
            "owner_id": users[3].id,  # Jane Smith
            "project_id": projects[2].id,
        },
        
        # DevOps Pipeline tasks (completed project)
        {
            "title": "Docker containerization",
            "description": "Containerisation compl√®te des services avec Docker multi-stage builds et optimisations",
            "status": TaskStatus.DONE,
            "priority": TaskPriority.HIGH,
            "due_date": datetime.now() - timedelta(days=80),
            "estimated_hours": 24,
            "actual_hours": 26,
            "is_completed": True,
            "completion_date": datetime.now() - timedelta(days=80),
            "owner_id": users[4].id,  # Developer
            "project_id": projects[3].id,
        },
        {
            "title": "Kubernetes deployment",
            "description": "D√©ploiement sur cluster Kubernetes avec auto-scaling, health checks et rolling updates",
            "status": TaskStatus.DONE,
            "priority": TaskPriority.HIGH,
            "due_date": datetime.now() - timedelta(days=60),
            "estimated_hours": 32,
            "actual_hours": 35,
            "is_completed": True,
            "completion_date": datetime.now() - timedelta(days=60),
            "owner_id": users[4].id,  # Developer
            "project_id": projects[3].id,
        },
        {
            "title": "Monitoring & alerting",
            "description": "Mise en place de Prometheus, Grafana et AlertManager avec dashboards personnalis√©s",
            "status": TaskStatus.DONE,
            "priority": TaskPriority.MEDIUM,
            "due_date": datetime.now() - timedelta(days=30),
            "estimated_hours": 20,
            "actual_hours": 18,
            "is_completed": True,
            "completion_date": datetime.now() - timedelta(days=30),
            "owner_id": users[4].id,  # Developer
            "project_id": projects[3].id,
        },
        
        # Analytics Dashboard tasks
        {
            "title": "Data pipeline setup",
            "description": "Pipeline de donn√©es avec Apache Airflow pour l'ingestion et transformation des donn√©es",
            "status": TaskStatus.IN_PROGRESS,
            "priority": TaskPriority.HIGH,
            "due_date": datetime.now() + timedelta(days=10),
            "estimated_hours": 30,
            "actual_hours": 20,
            "owner_id": users[3].id,  # Jane Smith
            "project_id": projects[4].id,
        },
        {
            "title": "Real-time visualizations",
            "description": "Graphiques interactifs avec D3.js/Chart.js et mise √† jour en temps r√©el via WebSocket",
            "status": TaskStatus.TODO,
            "priority": TaskPriority.MEDIUM,
            "due_date": datetime.now() + timedelta(days=25),
            "estimated_hours": 28,
            "owner_id": users[3].id,  # Jane Smith
            "project_id": projects[4].id,
        },
        
        # Security Audit tasks
        {
            "title": "Vulnerability assessment",
            "description": "Scan automatis√© des vuln√©rabilit√©s avec OWASP ZAP et analyse manuelle approfondie",
            "status": TaskStatus.TODO,
            "priority": TaskPriority.HIGH,
            "due_date": datetime.now() + timedelta(days=12),
            "estimated_hours": 24,
            "owner_id": users[5].id,  # Tester
            "project_id": projects[5].id,
        },
        {
            "title": "Penetration testing",
            "description": "Tests de p√©n√©tration sur l'infrastructure et les applications avec rapport d√©taill√©",
            "status": TaskStatus.TODO,
            "priority": TaskPriority.HIGH,
            "due_date": datetime.now() + timedelta(days=20),
            "estimated_hours": 32,
            "owner_id": users[5].id,  # Tester
            "project_id": projects[5].id,
        },
        {
            "title": "Security recommendations",
            "description": "Document complet avec recommandations de s√©curit√© et plan d'am√©lioration",
            "status": TaskStatus.TODO,
            "priority": TaskPriority.MEDIUM,
            "due_date": datetime.now() + timedelta(days=30),
            "estimated_hours": 16,
            "owner_id": users[5].id,  # Tester
            "project_id": projects[5].id,
        },
    ]
    
    tasks = []
    for task_data in tasks_data:
        task = Task(**task_data)
        session.add(task)
        tasks.append(task)
    
    session.commit()
    print(f"‚úÖ {len(tasks)} t√¢ches cr√©√©es")
    return tasks

def print_summary(users, projects, tasks):
    """Print initialization summary."""
    print("\n" + "=" * 80)
    print("üéâ INITIALISATION TERMIN√âE AVEC SUCC√àS")
    print("=" * 80)
    
    print("\nüìä R√âSUM√â DES DONN√âES CR√â√âES:")
    print(f"‚îú‚îÄ‚îÄ Utilisateurs : {len(users)}")
    print(f"‚îú‚îÄ‚îÄ Projets : {len(projects)}")
    print(f"‚îî‚îÄ‚îÄ T√¢ches : {len(tasks)}")
    
    print("\nüîë COMPTES DE D√âMONSTRATION:")
    print("‚îú‚îÄ‚îÄ Admin : admin@example.com / admin123")
    print("‚îú‚îÄ‚îÄ Manager : manager@example.com / manager123")
    print("‚îú‚îÄ‚îÄ John Doe : john.doe@example.com / user123")
    print("‚îú‚îÄ‚îÄ Jane Smith : jane.smith@example.com / user123")
    print("‚îú‚îÄ‚îÄ Developer : developer@example.com / dev123")
    print("‚îî‚îÄ‚îÄ Tester : tester@example.com / test123")
    
    print("\nüåê ACC√àS √Ä L'APPLICATION:")
    print("‚îú‚îÄ‚îÄ Frontend : http://localhost:3000")
    print("‚îú‚îÄ‚îÄ API Backend : http://localhost:8000")
    print("‚îú‚îÄ‚îÄ Documentation API : http://localhost:8000/docs")
    print("‚îî‚îÄ‚îÄ Alternative docs : http://localhost:8000/redoc")
    
    print("\nüß™ TESTS RAPIDES:")
    print("‚îú‚îÄ‚îÄ Connexion : curl -X POST http://localhost:8000/api/v1/auth/login/json \\")
    print("‚îÇ                -H 'Content-Type: application/json' \\")
    print("‚îÇ                -d '{\"email\":\"admin@example.com\",\"password\":\"admin123\"}'")
    print("‚îú‚îÄ‚îÄ Projets : curl http://localhost:8000/api/v1/projects")
    print("‚îî‚îÄ‚îÄ T√¢ches : curl http://localhost:8000/api/v1/tasks")
    
    print("\n" + "=" * 80)
    print("üöÄ PROJET PR√äT POUR LE D√âVELOPPEMENT !")
    print("=" * 80)

def main():
    """Main initialization function."""
    print_banner()
    
    # Get database configuration
    database_url = get_database_url()
    print(f"üîó URL de la base de donn√©es : {database_url}")
    
    # Create database engine
    engine = create_engine(database_url)
    
    # Wait for database to be ready
    if not wait_for_database(engine):
        print("‚ùå Impossible de se connecter √† la base de donn√©es")
        sys.exit(1)
    
    # Run migrations or create tables
    if not run_migrations(engine):
        print("‚ùå √âchec de l'initialisation du sch√©ma")
        sys.exit(1)
    
    # Create session
    Session = sessionmaker(bind=engine)
    session = Session()
    
    try:
        # Verify database schema
        if not check_database_schema(session):
            print("‚ùå Sch√©ma de la base de donn√©es invalide")
            sys.exit(1)
        
        # Clear existing data
        clear_existing_data(session)
        
        # Create demo data
        users = create_demo_users(session)
        projects = create_demo_projects(session, users)
        tasks = create_demo_tasks(session, users, projects)
        
        # Print summary
        print_summary(users, projects, tasks)
        
    except Exception as e:
        print(f"‚ùå Erreur lors de l'initialisation : {e}")
        session.rollback()
        raise
    finally:
        session.close()
        engine.dispose()

if __name__ == "__main__":
    main()