"""
Main FastAPI application module.
"""
import time
from contextlib import asynccontextmanager
from typing import AsyncGenerator

from fastapi import FastAPI, Request, Response
from fastapi.middleware.cors import CORSMiddleware
from fastapi.middleware.gzip import GZipMiddleware
from fastapi.responses import JSONResponse
from prometheus_client import Counter, Histogram, generate_latest
from starlette.middleware.base import BaseHTTPMiddleware

from app.api.v1.api import api_router
from app.core.config import settings
from app.core.database import engine
from app.core.redis import redis_client
from app.models.base import Base

# M√©triques Prometheus
REQUEST_COUNT = Counter('http_requests_total', 'Total HTTP requests', ['method', 'endpoint', 'status'])
REQUEST_DURATION = Histogram('http_request_duration_seconds', 'HTTP request duration')
REQUEST_IN_PROGRESS = Counter('http_requests_in_progress', 'HTTP requests currently in progress')


class PrometheusMiddleware(BaseHTTPMiddleware):
    """Middleware pour collecter les m√©triques Prometheus."""
    
    async def dispatch(self, request: Request, call_next):
        start_time = time.time()
        REQUEST_IN_PROGRESS.inc()
        
        try:
            response = await call_next(request)
            
            # Collecter les m√©triques
            REQUEST_COUNT.labels(
                method=request.method,
                endpoint=request.url.path,
                status=response.status_code
            ).inc()
            
            REQUEST_DURATION.observe(time.time() - start_time)
            
            return response
        except Exception as e:
            REQUEST_COUNT.labels(
                method=request.method,
                endpoint=request.url.path,
                status=500
            ).inc()
            raise
        finally:
            REQUEST_IN_PROGRESS.dec()


@asynccontextmanager
async def lifespan(app: FastAPI) -> AsyncGenerator:
    """Gestionnaire de cycle de vie de l'application."""
    # Startup
    print("üöÄ D√©marrage de l'application Platform...")
    
    # Cr√©er les tables si elles n'existent pas
    async with engine.begin() as conn:
        await conn.run_sync(Base.metadata.create_all)
    
    # V√©rifier la connexion Redis
    try:
        await redis_client.ping()
        print("‚úÖ Connexion Redis √©tablie")
    except Exception as e:
        print(f"‚ùå Erreur de connexion Redis: {e}")
    
    print("‚úÖ Application d√©marr√©e avec succ√®s!")
    
    yield
    
    # Shutdown
    print("üîÑ Arr√™t de l'application...")
    await redis_client.close()
    await engine.dispose()
    print("‚úÖ Application arr√™t√©e proprement")


def create_application() -> FastAPI:
    """Cr√©er et configurer l'application FastAPI."""
    
    app = FastAPI(
        title=settings.PROJECT_NAME,
        version=settings.VERSION,
        description="""
        ## Plateforme de Gestion Python

        Une API moderne et performante pour la gestion d'entreprise.

        ### Fonctionnalit√©s principales:
        - üîê Authentification JWT s√©curis√©e
        - üë• Gestion des utilisateurs et √©quipes
        - üìä Tableaux de bord et analytics
        - üîÑ T√¢ches asynchrones avec Celery
        - üìà Monitoring avec Prometheus
        - üöÄ Performance optimis√©e avec Redis

        ### Technologies:
        - **FastAPI** - Framework web moderne
        - **SQLAlchemy** - ORM Python
        - **PostgreSQL** - Base de donn√©es
        - **Redis** - Cache et sessions
        - **Celery** - T√¢ches asynchrones
        """,
        openapi_url=f"{settings.API_V1_STR}/openapi.json",
        docs_url="/docs",
        redoc_url="/redoc",
        lifespan=lifespan,
    )
    
    # Middlewares
    app.add_middleware(
        CORSMiddleware,
        allow_origins=settings.BACKEND_CORS_ORIGINS,
        allow_credentials=True,
        allow_methods=["*"],
        allow_headers=["*"],
    )
    
    app.add_middleware(GZipMiddleware, minimum_size=1000)
    app.add_middleware(PrometheusMiddleware)
    
    # Routes
    app.include_router(api_router, prefix=settings.API_V1_STR)
    
    return app


# Cr√©er l'instance de l'application
app = create_application()


@app.get("/health")
async def health_check():
    """Endpoint de v√©rification de sant√©."""
    try:
        # V√©rifier la base de donn√©es
        async with engine.begin() as conn:
            await conn.execute("SELECT 1")
        
        # V√©rifier Redis
        await redis_client.ping()
        
        return {
            "status": "healthy",
            "timestamp": time.time(),
            "version": settings.VERSION,
            "database": "connected",
            "redis": "connected"
        }
    except Exception as e:
        return JSONResponse(
            status_code=503,
            content={
                "status": "unhealthy",
                "timestamp": time.time(),
                "error": str(e)
            }
        )


@app.get("/metrics")
async def metrics():
    """Endpoint pour les m√©triques Prometheus."""
    return Response(generate_latest(), media_type="text/plain")


@app.get("/")
async def root():
    """Endpoint racine."""
    return {
        "message": "Bienvenue sur la Plateforme de Gestion Python",
        "version": settings.VERSION,
        "docs": "/docs",
        "redoc": "/redoc",
        "health": "/health",
        "metrics": "/metrics"
    }


if __name__ == "__main__":
    import uvicorn
    
    uvicorn.run(
        "app.main:app",
        host="0.0.0.0",
        port=8000,
        reload=True,
        log_level="info"
    )