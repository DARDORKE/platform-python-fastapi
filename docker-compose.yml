version: '3.8'

services:
  # Base de donn√©es PostgreSQL
  database:
    image: postgres:15-alpine
    container_name: platform_database
    environment:
      POSTGRES_DB: platform
      POSTGRES_USER: platform_user
      POSTGRES_PASSWORD: platform_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U platform_user -d platform"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - platform_network

  # Redis pour cache et sessions
  redis:
    image: redis:7-alpine
    container_name: platform_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - platform_network

  # Backend FastAPI
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: platform_backend
    environment:
      DATABASE_URL: "postgresql+asyncpg://platform_user:platform_password@database:5432/platform"
      REDIS_URL: "redis://redis:6379/0"
      SECRET_KEY: "your-secret-key-change-in-production"
      ALGORITHM: "HS256"
      ACCESS_TOKEN_EXPIRE_MINUTES: 30
      REFRESH_TOKEN_EXPIRE_DAYS: 30
      CORS_ORIGINS: "http://localhost:3000,http://localhost:19006"
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
      - backend_cache:/app/__pycache__
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: ["python", "simple_main.py"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - platform_network

  # Frontend React
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: platform_frontend
    environment:
      VITE_API_BASE_URL: "http://localhost:8000"
      VITE_APP_NAME: "Platform"
    ports:
      - "3000:3000"
    volumes:
      - frontend_node_modules:/app/node_modules
    depends_on:
      - backend
    command: ["serve", "-s", "dist", "-l", "3000", "--single"]
    networks:
      - platform_network


volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  backend_cache:
    driver: local
  frontend_node_modules:
    driver: local

networks:
  platform_network:
    driver: bridge