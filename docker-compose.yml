version: '3.8'

services:
  # Base de données PostgreSQL
  database:
    image: postgres:15-alpine
    container_name: platform_database
    environment:
      POSTGRES_DB: platform
      POSTGRES_USER: platform_user
      POSTGRES_PASSWORD: platform_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U platform_user -d platform"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - platform_network

  # Redis pour cache et sessions
  redis:
    image: redis:7-alpine
    container_name: platform_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - platform_network

  # Backend FastAPI
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: platform_backend
    environment:
      DATABASE_URL: "postgresql://platform_user:platform_password@database:5432/platform"
      REDIS_URL: "redis://redis:6379/0"
      SECRET_KEY: "your-secret-key-change-in-production"
      ALGORITHM: "HS256"
      ACCESS_TOKEN_EXPIRE_MINUTES: 30
      REFRESH_TOKEN_EXPIRE_DAYS: 30
      CORS_ORIGINS: "http://localhost:3000,http://localhost:19006"
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
      - backend_cache:/app/__pycache__
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - platform_network

  # Frontend React
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: platform_frontend
    environment:
      VITE_API_BASE_URL: "http://localhost:8000"
      VITE_APP_NAME: "Platform"
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - frontend_node_modules:/app/node_modules
    depends_on:
      - backend
    command: ["npm", "run", "dev"]
    networks:
      - platform_network

  # Worker Celery
  worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: platform_worker
    environment:
      DATABASE_URL: "postgresql://platform_user:platform_password@database:5432/platform"
      REDIS_URL: "redis://redis:6379/0"
      SECRET_KEY: "your-secret-key-change-in-production"
    volumes:
      - ./backend:/app
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: ["celery", "worker", "-A", "app.workers.celery_app", "--loglevel=info"]
    networks:
      - platform_network

  # Celery Beat (scheduler)
  beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: platform_beat
    environment:
      DATABASE_URL: "postgresql://platform_user:platform_password@database:5432/platform"
      REDIS_URL: "redis://redis:6379/0"
      SECRET_KEY: "your-secret-key-change-in-production"
    volumes:
      - ./backend:/app
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: ["celery", "beat", "-A", "app.workers.celery_app", "--loglevel=info"]
    networks:
      - platform_network

  # Flower (monitoring Celery)
  flower:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: platform_flower
    environment:
      REDIS_URL: "redis://redis:6379/0"
    ports:
      - "5555:5555"
    volumes:
      - ./backend:/app
    depends_on:
      - redis
    command: ["celery", "flower", "-A", "app.workers.celery_app", "--broker=redis://redis:6379/0"]
    networks:
      - platform_network

  # Prometheus pour les métriques
  prometheus:
    image: prom/prometheus:latest
    container_name: platform_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    networks:
      - platform_network

  # Grafana pour les dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: platform_grafana
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: "admin"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus
    networks:
      - platform_network

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: platform_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./ssl:/etc/ssl/certs
    depends_on:
      - backend
      - frontend
    networks:
      - platform_network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  backend_cache:
    driver: local
  frontend_node_modules:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  platform_network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.21.0.0/16